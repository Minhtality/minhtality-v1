import type { CloudFrontRequest, CloudFrontEvent, CloudFrontResponse } from "aws-lambda";
import { DynamicSsgRoute, SsgRoute } from "next/dist/build";
export declare type DynamicPageKeyValue = {
    [key: string]: {
        file: string;
        regex: string;
    };
};
export declare type ImageConfig = {
    deviceSizes: number[];
    imageSizes: number[];
    loader: "default" | "imgix" | "cloudinary" | "akamai";
    path: string;
    domains?: string[];
};
export declare type ImagesManifest = {
    version: number;
    images: ImageConfig;
};
export declare type OriginRequestApiHandlerManifest = {
    apis: {
        dynamic: DynamicPageKeyValue;
        nonDynamic: {
            [key: string]: string;
        };
    };
    domainRedirects: {
        [key: string]: string;
    };
    enableHTTPCompression: boolean;
    authentication?: {
        username: string;
        password: string;
    };
};
export declare type OriginRequestDefaultHandlerManifest = {
    buildId: string;
    logLambdaExecutionTimes: boolean;
    pages: {
        ssr: {
            dynamic: DynamicPageKeyValue;
            catchAll: DynamicPageKeyValue;
            nonDynamic: {
                [key: string]: string;
            };
        };
        html: {
            nonDynamic: {
                [path: string]: string;
            };
            dynamic: DynamicPageKeyValue;
        };
        ssg: {
            nonDynamic: {
                [path: string]: SsgRoute;
            };
            dynamic: {
                [path: string]: DynamicSsgRoute;
            };
        };
    };
    publicFiles: {
        [key: string]: string;
    };
    trailingSlash: boolean;
    enableHTTPCompression: boolean;
    domainRedirects: {
        [key: string]: string;
    };
    authentication?: {
        username: string;
        password: string;
    };
};
export declare type OriginRequestImageHandlerManifest = {
    enableHTTPCompression: boolean;
    domainRedirects: {
        [key: string]: string;
    };
};
export declare type OriginRequestEvent = {
    Records: [{
        cf: {
            request: CloudFrontRequest;
            config: CloudFrontEvent["config"];
        };
    }];
};
export declare type OriginResponseEvent = {
    Records: [{
        cf: {
            request: CloudFrontRequest;
            response: CloudFrontResponse;
            config: CloudFrontEvent["config"];
        };
    }];
};
export declare type PreRenderedManifest = {
    version: 2;
    routes: {
        [route: string]: {
            initialRevalidateSeconds: number | false;
            srcRoute: string | null;
            dataRoute: string;
        };
    };
    dynamicRoutes: {
        [route: string]: {
            routeRegex: string;
            fallback: string | false;
            dataRoute: string;
            dataRouteRegex: string;
        };
    };
    preview: {
        previewModeId: string;
        previewModeSigningKey: string;
        previewModeEncryptionKey: string;
    };
};
export declare type RedirectData = {
    statusCode: number;
    source: string;
    destination: string;
    regex: string;
    internal?: boolean;
};
export declare type RewriteData = {
    source: string;
    destination: string;
    regex: string;
};
export declare type Header = {
    key: string;
    value: string;
};
export declare type HeaderData = {
    source: string;
    headers: Header[];
    regex: string;
};
export declare type I18nData = {
    locales: string[];
    defaultLocale: string;
};
export declare type RoutesManifest = {
    basePath: string;
    redirects: RedirectData[];
    rewrites: RewriteData[];
    headers: HeaderData[];
    i18n?: I18nData;
};
export declare type PerfLogger = {
    now: () => number | undefined;
    log: (metricDescription: string, t1?: number, t2?: number) => void;
};
