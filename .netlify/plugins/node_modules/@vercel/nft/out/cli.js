#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const { copyFile, mkdir } = fs_1.promises;
const rimraf = require('rimraf');
const node_file_trace_1 = require("./node-file-trace");
async function cli(action = process.argv[2], files = process.argv.slice(3), outputDir = 'dist', cwd = process.cwd()) {
    const opts = {
        ts: true,
        mixedModules: true,
        log: true
    };
    const { fileList, esmFileList, warnings } = await node_file_trace_1.nodeFileTrace(files, opts);
    const allFiles = fileList.concat(esmFileList);
    const stdout = [];
    if (action === 'print') {
        stdout.push('FILELIST:');
        stdout.push(...allFiles);
        stdout.push('\n');
        if (warnings.length > 0) {
            stdout.push('WARNINGS:');
            stdout.push(...warnings);
        }
    }
    else if (action === 'build') {
        rimraf.sync(path_1.join(cwd, outputDir));
        for (const f of allFiles) {
            const src = path_1.join(cwd, f);
            const dest = path_1.join(cwd, outputDir, f);
            const dir = path_1.dirname(dest);
            await mkdir(dir, { recursive: true });
            await copyFile(src, dest);
        }
    }
    else {
        stdout.push('â–³ nft - provide an action such as `nft build` or `nft print`.');
    }
    return stdout.join('\n');
}
if (require.main === module) {
    cli().then(console.log).catch(console.error);
}
module.exports = cli;
